# Upgrade Validation Contract

**Feature**: 005-safe-dependency-updates  
**Version**: 1.0.0  
**Date**: 2025-10-20

## Overview

本契約定義依賴升級過程中的自動化驗證檢查點 (validation checkpoints),確保每次升級符合品質和效能標準。契約採用 YAML 格式,可被自動化工具 (CI/CD, 腳本) 解析和執行。

---

## Validation Checkpoints

### 1. TypeScript Compilation Check

驗證 TypeScript 程式碼編譯無錯誤。

```yaml
checkpointId: compilation-check
name: "TypeScript Compilation"
type: compilation
priority: critical
command: "npx tsc --noEmit"
workingDirectory: "."
timeout: 60000  # 60 秒

successCriteria:
  exitCode: 0
  maxDuration: 60000
  allowedWarnings: 0

failureHandling:
  action: abort
  rollback: true
  notification: true
  message: "TypeScript compilation failed. Upgrade aborted."

outputValidation:
  mustNotContain:
    - "error TS"
    - "Cannot find"
  mustContain:
    - []  # 無輸出表示成功

metrics:
  record:
    - duration
    - memoryUsage
  compare:
    baseline: "performance-baseline.json"
    maxIncrease: 10  # 10% 增幅上限
```

---

### 2. Unit Test Execution Check

驗證所有單元測試通過,無失敗或跳過的測試。

```yaml
checkpointId: unit-test-check
name: "Unit Tests"
type: test
priority: critical
command: "npm test"
workingDirectory: "."
timeout: 180000  # 3 分鐘

successCriteria:
  exitCode: 0
  minPassRate: 100  # 100% 通過率
  maxFailures: 0
  maxSkipped: 0
  maxDuration: 180000

failureHandling:
  action: abort
  rollback: true
  notification: true
  message: "Unit tests failed. Check test output for details."
  attachLogs: true

outputValidation:
  mustContain:
    - "63 passing"
  mustNotContain:
    - "failing"
    - "pending"
    - "Error:"

metrics:
  record:
    - duration
    - totalTests
    - passedTests
    - failedTests
    - skippedTests
    - averageTestDuration
  compare:
    baseline: "performance-baseline.json"
    maxIncrease: 10  # 測試時間增幅 ≤10%
```

---

### 3. Code Coverage Check

驗證測試覆蓋率維持或提升,不低於基準值。

```yaml
checkpointId: coverage-check
name: "Code Coverage"
type: coverage
priority: high
command: "npm run test:coverage"
workingDirectory: "."
timeout: 240000  # 4 分鐘

successCriteria:
  exitCode: 0
  minCoverage:
    lines: 87.21
    branches: 75.00
    functions: 80.00
    statements: 87.21
  maxDelta: -0.5  # 允許最多降低 0.5%

failureHandling:
  action: warn  # 覆蓋率降低為警告,不阻斷
  rollback: false
  notification: true
  message: "Code coverage decreased. Review test coverage report."

outputValidation:
  extractMetrics:
    - pattern: "Lines\\s+:\\s+(\\d+\\.\\d+)%"
      metric: linesCovered
    - pattern: "Branches\\s+:\\s+(\\d+\\.\\d+)%"
      metric: branchesCovered
    - pattern: "Functions\\s+:\\s+(\\d+\\.\\d+)%"
      metric: functionsCovered
    - pattern: "Statements\\s+:\\s+(\\d+\\.\\d+)%"
      metric: statementsCovered

metrics:
  record:
    - linesCovered
    - branchesCovered
    - functionsCovered
    - statementsCovered
  compare:
    baseline: "performance-baseline.json"
    minBaseline: 87.21
```

---

### 4. Lint Check (ESLint)

驗證程式碼品質,確保無新增 lint 錯誤。

```yaml
checkpointId: lint-check
name: "ESLint Check"
type: lint
priority: high
command: "npm run lint"
workingDirectory: "."
timeout: 45000  # 45 秒

successCriteria:
  exitCode: 0
  maxErrors: 0
  maxWarnings: 10  # 允許最多 10 個警告 (現有警告)
  maxDuration: 30000  # 30 秒上限

failureHandling:
  action: warn  # Lint 錯誤為警告 (可能需要規則調整)
  rollback: false
  notification: true
  message: "ESLint detected errors. Review and fix or adjust rules."

outputValidation:
  extractMetrics:
    - pattern: "(\\d+) errors?"
      metric: errorCount
    - pattern: "(\\d+) warnings?"
      metric: warningCount

metrics:
  record:
    - duration
    - errorCount
    - warningCount
    - filesScanned
  compare:
    baseline: "performance-baseline.json"
    maxDuration: 30000
```

---

### 5. Development Build Check

驗證開發模式建置成功,產出檔案正確。

```yaml
checkpointId: dev-build-check
name: "Development Build"
type: build
priority: critical
command: "npm run compile"
workingDirectory: "."
timeout: 120000  # 2 分鐘

successCriteria:
  exitCode: 0
  maxDuration: 120000
  requiredFiles:
    - path: "dist/extension.js"
      minSize: 100000  # 最小 100KB
      maxSizeIncrease: 5  # 檔案大小增幅 ≤5%
    - path: "dist/extension.js.map"
      minSize: 10000

failureHandling:
  action: abort
  rollback: true
  notification: true
  message: "Development build failed. Check webpack output."

outputValidation:
  mustNotContain:
    - "ERROR"
    - "Failed to compile"
  allowedWarnings: 5  # 允許最多 5 個警告

artifacts:
  collect:
    - "dist/extension.js"
    - "dist/extension.js.map"
  metadata:
    - fileName: "build-artifacts/dev-build-{timestamp}.json"
      fields:
        - buildTime
        - fileSize
        - hash
        - warnings
        - errors

metrics:
  record:
    - buildTime
    - bundleSize
    - sourcemapSize
    - warnings
    - errors
  compare:
    baseline: "performance-baseline.json"
    maxSizeIncrease: 5  # 5% 增幅上限
    maxTimeIncrease: 10  # 10% 時間增幅上限
```

---

### 6. Production Build Check

驗證生產模式建置成功,產出優化且無錯誤。

```yaml
checkpointId: prod-build-check
name: "Production Build"
type: build
priority: critical
command: "npm run package"
workingDirectory: "."
timeout: 180000  # 3 分鐘

successCriteria:
  exitCode: 0
  maxDuration: 180000
  requiredFiles:
    - path: "dist/extension.js"
      minSize: 100000
      maxSizeIncrease: 5
  maxWarnings: 0  # 生產建置不允許警告

failureHandling:
  action: abort
  rollback: true
  notification: true
  message: "Production build failed. This is a critical issue."
  severity: critical

outputValidation:
  mustNotContain:
    - "ERROR"
    - "Failed"
    - "warning"

artifacts:
  collect:
    - "dist/extension.js"
  metadata:
    - fileName: "build-artifacts/prod-build-{timestamp}.json"
      fields:
        - buildTime
        - fileSize
        - hash
        - optimizationStats

metrics:
  record:
    - buildTime
    - bundleSize
    - compressionRatio
  compare:
    baseline: "performance-baseline.json"
    maxSizeIncrease: 5
    maxTimeIncrease: 10
```

---

### 7. I18n Lint Check (Optional)

驗證國際化訊息格式正確。

```yaml
checkpointId: i18n-lint-check
name: "I18n Lint"
type: lint
priority: medium
command: "npm run lint:i18n"
workingDirectory: "."
timeout: 30000  # 30 秒

successCriteria:
  exitCode: 0
  maxErrors: 0

failureHandling:
  action: warn
  rollback: false
  notification: true
  message: "I18n lint found issues. Review localization files."

outputValidation:
  mustNotContain:
    - "error"
    - "missing key"

metrics:
  record:
    - duration
    - filesChecked
    - errorsFound
```

---

## Validation Sequence

定義驗證檢查點的執行順序和依賴關係。

```yaml
validationSequence:
  stages:
    - stageId: "pre-upgrade"
      name: "Pre-Upgrade Baseline"
      checkpoints:
        - compilation-check
        - unit-test-check
        - coverage-check
        - lint-check
        - dev-build-check
        - prod-build-check
      stopOnFailure: true
      recordBaseline: true

    - stageId: "post-typescript-upgrade"
      name: "After TypeScript Upgrade (P1)"
      dependsOn: ["pre-upgrade"]
      checkpoints:
        - compilation-check
        - unit-test-check
        - coverage-check
        - dev-build-check
      stopOnFailure: true

    - stageId: "post-typescript-eslint-upgrade"
      name: "After @typescript-eslint Upgrade (P1)"
      dependsOn: ["post-typescript-upgrade"]
      checkpoints:
        - compilation-check
        - lint-check
        - unit-test-check
        - dev-build-check
        - prod-build-check
      stopOnFailure: true

    - stageId: "post-testing-upgrade"
      name: "After Testing Frameworks Upgrade (P2)"
      dependsOn: ["post-typescript-eslint-upgrade"]
      checkpoints:
        - unit-test-check
        - coverage-check
      stopOnFailure: true

    - stageId: "post-build-tools-upgrade"
      name: "After Build Tools Upgrade (P3a)"
      dependsOn: ["post-testing-upgrade"]
      checkpoints:
        - compilation-check
        - dev-build-check
        - prod-build-check
        - unit-test-check
      stopOnFailure: true

    - stageId: "post-eslint-upgrade"
      name: "After ESLint Upgrade (P3b)"
      dependsOn: ["post-build-tools-upgrade"]
      checkpoints:
        - lint-check
        - i18n-lint-check
      stopOnFailure: false  # Lint 問題不阻斷

    - stageId: "final-validation"
      name: "Final Full Validation"
      dependsOn: ["post-eslint-upgrade"]
      checkpoints:
        - compilation-check
        - unit-test-check
        - coverage-check
        - lint-check
        - dev-build-check
        - prod-build-check
        - i18n-lint-check
      stopOnFailure: true
      generateReport: true
```

---

## Rollback Triggers

定義觸發回滾的條件。

```yaml
rollbackTriggers:
  - condition: "compilation-check fails"
    action: "rollback to previous stage"
    message: "TypeScript compilation failed. Rolling back to {previousVersion}."

  - condition: "unit-test-check fails"
    action: "rollback to previous stage"
    message: "Tests failed. Rolling back to {previousVersion}."

  - condition: "prod-build-check fails"
    action: "rollback to previous stage"
    message: "Production build failed. Rolling back to {previousVersion}."

  - condition: "coverage-check fails and delta > -2%"
    action: "warn only"
    message: "Coverage decreased by {delta}%, but within acceptable range."

  - condition: "lint-check fails"
    action: "warn only"
    message: "Lint errors detected. Manual review required."

  - condition: "build size increase > 10%"
    action: "rollback to previous stage"
    message: "Bundle size increased by {delta}%, exceeding 10% threshold."

  - condition: "test duration increase > 20%"
    action: "warn and manual review"
    message: "Test duration increased by {delta}%, exceeding 20% threshold."
```

---

## Notification Configuration

定義通知方式和接收者。

```yaml
notifications:
  channels:
    - type: "console"
      enabled: true
      verbosity: "detailed"

    - type: "file"
      enabled: true
      logFile: "specs/005-safe-dependency-updates/data/validation-log.json"
      format: "json"

    - type: "github-comment"
      enabled: false  # 在 CI/CD 中啟用
      target: "pull-request"
      onFailure: true
      onWarning: true

  recipients:
    - role: "developer"
      notify: ["failure", "warning"]
    - role: "ci-system"
      notify: ["all"]
```

---

## Performance Baseline

定義效能基準的結構和比對邏輯。

```yaml
performanceBaseline:
  file: "specs/005-safe-dependency-updates/data/performance-baseline.json"
  structure:
    version: "string"  # 基準版本 (e.g., "5.7.2")
    timestamp: "ISO8601"
    compilation:
      duration: "number (ms)"
      memoryUsage: "number (MB)"
    testing:
      duration: "number (ms)"
      totalTests: "number"
      averageTestDuration: "number (ms)"
    build:
      developmentDuration: "number (ms)"
      productionDuration: "number (ms)"
      bundleSize: "number (bytes)"
      sourcemapSize: "number (bytes)"
    lint:
      duration: "number (ms)"
      filesScanned: "number"

  comparison:
    tolerances:
      duration: 10  # ±10%
      size: 5       # ±5%
      coverage: -0.5  # 最多降低 0.5%
    strategy: "percentage-based"
    reportFormat: "json"
```

---

## Contract Validation

定義契約本身的驗證規則。

```yaml
contractValidation:
  schema: "upgrade-validation-contract-schema.json"
  requiredFields:
    - checkpointId
    - name
    - type
    - command
    - successCriteria
    - failureHandling

  checkpointTypes:
    allowed: ["compilation", "test", "build", "lint", "coverage"]

  priorities:
    allowed: ["critical", "high", "medium", "low"]

  validations:
    - rule: "All critical checkpoints must have rollback enabled"
      check: "priority == 'critical' => failureHandling.rollback == true"

    - rule: "Timeout must be reasonable (< 5 minutes)"
      check: "timeout <= 300000"

    - rule: "Command must be executable"
      check: "command starts with 'npm' or 'npx' or executable path"
```

---

## Usage Example

### 自動化腳本整合 (PowerShell)

```powershell
# validate-upgrade.ps1
param(
    [string]$Stage,
    [string]$ContractFile = "contracts/upgrade-validation-contract.yaml"
)

# 載入契約
$contract = ConvertFrom-Yaml (Get-Content $ContractFile -Raw)

# 找到對應的驗證階段
$stageConfig = $contract.validationSequence.stages | Where-Object { $_.stageId -eq $Stage }

# 執行所有檢查點
foreach ($checkpointId in $stageConfig.checkpoints) {
    $checkpoint = $contract | Select-Object -ExpandProperty $checkpointId
    
    Write-Host "Running checkpoint: $($checkpoint.name)"
    
    # 執行命令
    $result = Invoke-Expression $checkpoint.command
    
    # 驗證結果
    if ($LASTEXITCODE -ne $checkpoint.successCriteria.exitCode) {
        Write-Error "$($checkpoint.failureHandling.message)"
        
        if ($checkpoint.failureHandling.rollback) {
            # 執行回滾
            npm install  # 恢復 package-lock.json
        }
        
        exit 1
    }
}

Write-Host "✅ All checkpoints passed for stage: $Stage"
```

### CI/CD 整合 (GitHub Actions)

```yaml
# .github/workflows/validate-upgrade.yml
name: Validate Dependency Upgrade

on:
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run validation checkpoints
        run: |
          node scripts/validate-upgrade.js \
            --contract specs/005-safe-dependency-updates/contracts/upgrade-validation-contract.yaml \
            --stage final-validation
      
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: specs/005-safe-dependency-updates/data/validation-log.json
```

---

## Appendix: JSON Schema (Optional)

為契約文件提供結構驗證:

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Upgrade Validation Contract Schema",
  "type": "object",
  "required": ["checkpointId", "name", "type", "command", "successCriteria", "failureHandling"],
  "properties": {
    "checkpointId": {
      "type": "string",
      "pattern": "^[a-z0-9-]+$"
    },
    "name": {
      "type": "string",
      "minLength": 1
    },
    "type": {
      "enum": ["compilation", "test", "build", "lint", "coverage"]
    },
    "priority": {
      "enum": ["critical", "high", "medium", "low"]
    },
    "command": {
      "type": "string",
      "minLength": 1
    },
    "timeout": {
      "type": "integer",
      "minimum": 1000,
      "maximum": 300000
    },
    "successCriteria": {
      "type": "object",
      "required": ["exitCode"],
      "properties": {
        "exitCode": { "type": "integer" },
        "maxDuration": { "type": "integer" },
        "minPassRate": { "type": "number", "minimum": 0, "maximum": 100 }
      }
    },
    "failureHandling": {
      "type": "object",
      "required": ["action"],
      "properties": {
        "action": { "enum": ["abort", "warn", "continue"] },
        "rollback": { "type": "boolean" },
        "notification": { "type": "boolean" },
        "message": { "type": "string" }
      }
    }
  }
}
```

---

## Conclusion

本契約提供完整的自動化驗證框架,確保依賴升級過程的品質和可靠性。透過標準化的檢查點定義,可輕鬆整合到手動執行流程或 CI/CD pipeline 中,並提供清晰的失敗處理和回滾策略。
